/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */

class Solution {
public:
    /**
     * @param root: The root of binary tree.
     * @return: Preorder in vector which contains node values.
     */
    vector<int> preorderTraversal(TreeNode *root) {
        // write your code here
        vector<int> ans, left, right;
        if( root == nullptr){
            return ans;
        }
        ans.push_back(root->val);
        left = preorderTraversal(root->left);
        right = preorderTraversal(root->right);
        ans.insert(ans.end(),left.begin(), left.end());
        ans.insert(ans.end(),right.begin(), right.end());
        return ans;
    }
};



/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */

class Solution {
public:
    /**
     * @param root: The root of binary tree.
     * @return: Preorder in vector which contains node values.
     */
    vector<int> preorderTraversal(TreeNode *root) {
        // write your code here
        vector<int> ans;
        if(root == nullptr){
            return ans;
        }
        stack<TreeNode*> s;
        s.push(root);
        while(!s.empty()){
            TreeNode * thisTree = s.top();
            s.pop();
            ans.push_back(thisTree->val);
            if(thisTree->right!=nullptr){
                s.push(thisTree->right);
            }
            if(thisTree->left!=nullptr){
                s.push(thisTree->left);
            }
        }
        return ans;
    }
};
